const path = require('path');
const globby = require('globby');
const got = require('got');

/**
 * Token generated by concatenating username and password with `:` character within a base64 encoded string.
 * @param  {String} user User identifier.
 * @param  {String} pass Password.
 * @returns {String} Base64 encoded authentication token.
 */
const getAuthToken = (user, pass) => `Basic ${Buffer.from([user, pass].join(':')).toString('base64')}`;
module.exports.getAuthToken = getAuthToken;

/**
 * Get locations from sitemap
 * @param {String} xml
 */
const getUrlsFromSitemap = xml => {
  const locs = [];
  (xml || '').replace(/<loc>(.*)<\/loc>/gim, (_, m1) => locs.push(m1));
  return locs;
};
module.exports.getUrlsFromSitemap = getUrlsFromSitemap;

module.exports.getSitemap = async environment => {
  const { host, user, pass, sitemap } = environment || {};
  if (!sitemap) {
    return [];
  }
  const resource = `${host}${sitemap}`;
  const options = {
    method: 'get',
    rejectUnauthorized: false,
  };

  if (user && pass) {
    options.headers = { Authorization: getAuthToken(user, pass) };
  }

  const { body } = await got(resource, options);
  const rawUrls = getUrlsFromSitemap(body);
  return rawUrls
    .filter(u => u && /\:\/\//.test(u))
    .map(url => {
      if (user && pass) {
        const urlObj = new URL(url);
        urlObj.username = user;
        urlObj.password = pass;
        return urlObj.href;
      }

      return url;
    });
};

/**
 * Hostname from environment
 * @param {Object} environment
 */
module.exports.getHostame = environment => {
  const { host } = environment;
  const { hostname } = new URL(host);
  return hostname;
};

module.exports.getProjects = async (configDir = '') => {
  const cwd = configDir || path.join(__dirname, '../projects');
  const files = await globby('*visualtest.config.js', { cwd });

  const getName = file => file.charAt(0).toUpperCase() + file.slice(1).replace('.visualtest.config.js', '');

  const getPath = file => path.join(cwd, file);

  return files.map(file => ({
    name: getName(file),
    value: {
      name: getName(file),
      value: getPath(file),
    },
  }));
};

module.exports.getValue = (cmd, ...args) => {
  if (typeof cmd === 'function') {
    return cmd(...args);
  }

  return cmd;
};
