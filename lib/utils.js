const path = require('path');
const fs = require('fs');
const globby = require('globby');
const got = require('got');
const findUp = require('find-up');
const slugify = require('slugify');

/**
 * Token generated by concatenating username and password with `:` character within a base64 encoded string.
 * @param  {String} user User identifier.
 * @param  {String} pass Password.
 * @returns {String} Base64 encoded authentication token.
 */
const getAuthToken = (user, pass) => `Basic ${Buffer.from([user, pass].join(':')).toString('base64')}`;
module.exports.getAuthToken = getAuthToken;

/**
 * Get locations from sitemap
 * @param {String} xml
 */
const getUrlsFromSitemap = xml => {
  const locs = [];
  (xml || '').replace(/<loc>(.*)<\/loc>/gim, (_, m1) => locs.push(m1));
  return locs;
};
module.exports.getUrlsFromSitemap = getUrlsFromSitemap;

module.exports.getSitemap = async environment => {
  const { host, user, pass, sitemap } = environment || {};
  if (!sitemap) {
    return [];
  }
  const resource = `${host}${sitemap}`;
  const options = {
    method: 'get',
    rejectUnauthorized: false,
  };

  if (user && pass) {
    options.headers = { Authorization: getAuthToken(user, pass) };
  }

  const { body } = await got(resource, options);
  const rawUrls = getUrlsFromSitemap(body);
  return rawUrls
    .filter(u => u && /\:\/\//.test(u))
    .map(url => {
      if (user && pass) {
        const urlObj = new URL(url);
        urlObj.username = user;
        urlObj.password = pass;
        return urlObj.href;
      }

      return url;
    });
};

/**
 * Hostname from environment
 * @param {Object} environment
 */
module.exports.getHostame = environment => {
  const { host } = environment;
  const { hostname } = new URL(host);
  return hostname;
};

/**
 * Find config filess
 * @param {String} cwd
 * @returns {Array}
 */
const findConfigs = async (cwd = process.cwd()) => {
  let configs = [];
  await findUp(
    async cwd => {
      const files = await globby('*visualtest.config.js', { cwd });
      if (files.length) {
        configs = files.map(file => path.join(cwd, file));
        return findUp.stop;
      }
    },
    { type: 'directory', cwd: cwd }
  );

  return configs;
};

/**
 * Read single config file
 * @param {String} file
 */
const readConfig = file => {
  if (!fs.existsSync(file)) {
    throw new Error(`File ${file} not found`);
  }
  const data = require(file);
  data.path = file;
  data.name = data.name || path.basename(file, '.visualtest.config.js');
  data.uid = data.uid || slugify(data.name.toLowerCase());

  return data;
};

/**
 * Read config files
 * @param {Object} arg
 */
module.exports.readConfigs = async arg => {
  const { configDir = '', config = '' } = arg || {};
  if (config) {
    return [readConfig(path.resolve(config))];
  }

  const configs = await findConfigs(configDir || process.cwd());
  return configs.map(config => readConfig(config));
};
